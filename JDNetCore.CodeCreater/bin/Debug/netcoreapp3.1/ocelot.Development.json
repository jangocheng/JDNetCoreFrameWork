{
  "ReRoutes": [ //注意此处是数组形式, 支持垂直均衡
    {
      "UpstreamHttpMethod": [ "Get", "Post", "Delete", "Put", "Patch", "Option" ], //游请求的http方法，是个数组，你可以写多个。
      "UpstreamPathTemplate": "/api/{everything}", //上游请求的模板，即用户真实请求的链接
      "DownstreamPathTemplate": "/api/{everything}", //下游的路由模板，即真实处理请求的路径模板
      "DownstreamScheme": "https", //请求的方式，如：http,htttps
      "DownstreamHostAndPorts": [ //下游的IP以及端口,可以有多个(如果使用负载均衡)，方便实现负载均衡，当然你也可以使用服务发现，实现下游服务的自动注册与发现
        {
          "Host": "localhost",
          "Port": 10001
        },
        {
          "Host": "localhost",
          "Port": 10002
        }
      ],
      "LoadBalancerOptions": { //负载均衡选项（DownstreamHostAndPorts有多个的时候才能看到效果） , LeastConnection
        "Type": "RoundRobin" //轮流发送
        //"Type": "LeastConnection" //将请求发往最空闲的那个服务器
        //"Type": "NoLoadBalance" //不启用负载均衡，总是发往第一个请求或者服务发现的那个服务器
      },
      //"QoSOptions": { //熔断相关配置
      //  "ExceptionsAllowedBeforeBreaking": 3, //熔断次数
      //  "DurationOfBreak": 60000, //熔断时间 单位毫秒
      //  "TimeoutValue": 1000 //下游请求超时时间 单位毫秒
      //},
      "RateLimitOptions": { //限流相关配置
        "ClientWhitelist": [ "JDNetCore" ], // 在Headers 中增加ClientId 可以进入白名单, 一般在压测时开启
        "EnableRateLimiting": true, // 是否限流
        "Period": "1m", //限流控制的时间段，可以输入 1s（1秒），1m（1分），1h（1小时），1d（1天）类似的值，以此类推。
        "PeriodTimespan": 60, //超过限流限制的次数后，需要等待重置的时间（单位是秒）。
        "Limit": 10 // 在Period时间内最大能访问的数量。
      },
      "UpstreamHeaderTransform": { // Header传递
        "ClientId": "JDNetCore" // 这个骚操作可以直接取消限流
      },
      "DownstreamHeaderTransform": {
        "Server": "Kestrel, Nginx", // 这是蛋疼
        "X-Forwarded-For": "{RemoteIpAddress}", // 返回下游的ip 负载均衡时建议开启
        "Location": "https://localhost:5001"
      },
      "HttpHandlerOptions": {
        "AllowAutoRedirect": false
      }
    },
    {
      "DownstreamPathTemplate": "/BasicDataApi/swagger.json",
      "DownstreamScheme": "https",
      "ServiceName": "basedataapi",
      "LoadBalancerOptions": {
        "Type": "NoLoadBalance"
      },
      "UseServiceDiscovery": true,
      "UpstreamPathTemplate": "/BasicDataApi/swagger.json",
      "UpstreamHttpMethod": [ "GET", "POST", "DELETE", "PUT" ]
    }
  ],
  "GlobalConfiguration": {
    //"BaseUrl": "https://localhost:5001",
    "ServiceName": "DataService",
    "Consul": {
      "HttpEndpoint": "http://127.0.0.1:8500",
      "DnsEndpoint": {
        "Address": "127.0.0.1",
        "Port": 8300
      }
    }
  }
}